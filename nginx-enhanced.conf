events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Enhanced logging for load balancing analysis
    log_format enhanced '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'backend="$backend" active="$active" '
                       'response_time=$request_time upstream_time=$upstream_response_time';
    
    access_log /var/log/nginx/access.log enhanced;
    error_log /var/log/nginx/error.log warn;
    
    # Docker DNS resolver with caching
    resolver 127.0.0.11 valid=30s;
    resolver_timeout 5s;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # Enhanced upstream and routing configurations
    include /etc/nginx/conf.d/upstreams-enhanced.conf;
    include /etc/nginx/conf.d/routing-enhanced.conf;
    
    # Load balancing server configuration
    server {
        listen 80;
        server_name localhost;
        
        # Include active environment configuration
        include /etc/nginx/conf.d/active.env;
        
        # Health check endpoint - NGINX level
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"nginx-proxy","version":"2.0","timestamp":"$msec"}';
            add_header Content-Type application/json;
        }
        
        # Enhanced status endpoint with load balancing info
        location /status {
            access_log off;
            default_type application/json;
            return 200 '{"status":"running","active":"$active","backend":"$backend","timestamp":"$msec","load_balancer":"enhanced"}';
        }
        
        # Main application routing with enhanced load balancing
        location / {
            # Enhanced proxy settings for load balancing
            proxy_pass http://$final_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Load balancing specific headers
            proxy_set_header X-LB-Mode $lb_mode;
            proxy_set_header X-Migration-Status $migration_status;
            proxy_set_header X-Backend $backend;
            
            # Enhanced connection settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering off;
            
            # Enhanced error handling with automatic failover
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 30s;
            
            # Health check integration
            add_header X-Served-By $backend;
            add_header X-Response-Time $request_time;
        }
        
        # Blue environment direct access with health validation
        location /blue {
            return 302 /blue/;
        }
        
        location /blue/ {
            # CORS headers
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type";
            
            # Enhanced health check before routing
            access_by_lua_block {
                -- This would contain health validation logic in a full implementation
                -- For now, we rely on upstream health checks
            }
            
            proxy_pass http://blue/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Direct-Access "blue";
            
            # Enhanced error handling
            proxy_next_upstream error timeout;
            proxy_connect_timeout 30s;
        }
        
        # Green environment direct access with health validation
        location /green {
            return 302 /green/;
        }
        
        location /green/ {
            # CORS headers
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type";
            
            proxy_pass http://green/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Direct-Access "green";
            
            # Enhanced error handling
            proxy_next_upstream error timeout;
            proxy_connect_timeout 30s;
        }
        
        # Canary deployment endpoint for testing
        location /canary/ {
            proxy_pass http://$canary_target/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Canary-Test "true";
            
            add_header X-Canary-Backend $canary_target;
        }
        
        # Load balancing control endpoints
        location /lb/status {
            access_log off;
            default_type application/json;
            return 200 '{"active":"$active","backend":"$backend","lb_mode":"$lb_mode","migration_status":"$migration_status","canary_bucket":"$canary_bucket","timestamp":"$msec"}';
        }
        
        # Health validation endpoint for both environments
        location /health/dual {
            access_log off;
            default_type application/json;
            
            # This would perform dual health checks in a full implementation
            return 200 '{"blue":"checking","green":"checking","timestamp":"$msec"}';
        }
        
        # API endpoints - enhanced load balancer API
        location /api/ {
            proxy_pass http://api-server:9000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # API-specific timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Enhanced error pages
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
    }
    
    # Admin interface server with enhanced monitoring
    server {
        listen 8080;
        server_name localhost;
        
        root /var/www/html;
        index index.html;
        
        # Enhanced admin interface with load balancing information
        location / {
            try_files $uri $uri/ =404;
            
            # Add load balancing context for admin interface
            add_header X-Admin-Active $active;
            add_header X-Admin-Backend $backend;
        }
        
        # Admin API endpoints
        location /admin/api/ {
            proxy_pass http://api-server:9000/;
            proxy_set_header Host $host;
            proxy_set_header X-Admin-Request "true";
        }
        
        # Real-time metrics endpoint (placeholder)
        location /metrics {
            access_log off;
            default_type application/json;
            return 200 '{"active":"$active","connections":"$connections_active","timestamp":"$msec"}';
        }
    }
    
    # Optional: Metrics collection server for monitoring
    server {
        listen 9090;
        server_name localhost;
        
        # Internal access only
        allow 127.0.0.1;
        allow 172.0.0.0/8;
        deny all;
        
        location /nginx_status {
            stub_status on;
            access_log off;
        }
        
        location /metrics {
            access_log off;
            default_type text/plain;
            return 200 "# NGINX Enhanced Load Balancer Metrics
nginx_active_connections $connections_active
nginx_current_backend{backend=\"$backend\"} 1
nginx_active_environment{env=\"$active\"} 1
";
        }
    }
}