version: '3.8'

# True Blue-Green Deployment with Separated Services
# This architecture enables zero-downtime deployment by isolating services

services:
  # NGINX Proxy Service - Traffic Router
  nginx-proxy:
    build: ./nginx-service
    container_name: nginx-proxy
    ports:
      - "80:80"        # Main proxy
      - "8080:8080"    # Admin interface
    depends_on:
      blue-app:
        condition: service_healthy
      green-app:
        condition: service_healthy
    volumes:
      - nginx_config:/etc/nginx/dynamic
      - nginx_logs:/var/log/nginx
    networks:
      - bluegreen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Blue Environment Application
  blue-app:
    build: ./app-service
    container_name: blue-app
    environment:
      - ENV_NAME=blue
      - SERVER_PORT=3001
      - VERSION=1.0.0
    ports:
      - "3001:3001"    # Blue server (direct access)
    networks:
      - bluegreen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Green Environment Application  
  green-app:
    build: ./app-service
    container_name: green-app
    environment:
      - ENV_NAME=green
      - SERVER_PORT=3002
      - VERSION=2.0.0
    ports:
      - "3002:3002"    # Green server (direct access)
    networks:
      - bluegreen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # API Service for Deployment Control
  api-server:
    build: ./api-service
    container_name: api-server
    ports:
      - "9000:9000"    # API server
    depends_on:
      - nginx-proxy
      - blue-app
      - green-app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Docker communication
    networks:
      - bluegreen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Zero-Downtime Monitoring Service
  monitor:
    build: ./monitoring
    container_name: deployment-monitor
    environment:
      - MONITOR_INTERVAL=5
      - ALERT_THRESHOLD=3
    depends_on:
      - nginx-proxy
    networks:
      - bluegreen-network
    restart: unless-stopped
    volumes:
      - monitoring_data:/app/data

networks:
  bluegreen-network:
    driver: bridge
    name: bluegreen-network

volumes:
  nginx_config:
    driver: local
  nginx_logs:
    driver: local
  monitoring_data:
    driver: local