# .gitlab-ci.yml — DEV Blue/Green 파이프라인 (테스트 환경용)
# 기존 프로덕션 규칙을 보존하면서 Node.js 테스트 환경에 최적화

stages:
  - build-dev
  - test-dev
  - deploy-dev
  - health-check-dev
  - switch-traffic-dev
  - verify-dev
  - cleanup-dev

# 공통 변수 (테스트 환경용 수정)
variables:
  GIT_DEPTH: "0"
  NODE_OPTIONS: "--max_old_space_size=2048"
  NPM_CACHE_FOLDER: "$CI_PROJECT_DIR/.npm"
  DOCKER_DRIVER: overlay2

# NPM 캐시 — 브랜치별로 분리
cache:
  key: "npm-$CI_COMMIT_REF_SLUG"
  paths:
    - .npm
    - node_modules/

# 재사용 규칙 (dev, main 브랜치만) — 원본 유지
.rules_dev_and_main: &rules_dev_main
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - when: never

# 재사용 Alpine 세팅 (ssh, curl, docker 등) — 원본 기반 확장
.alpine_docker_setup: &alpine_docker_setup
  image: alpine:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache bash openssh-client curl ca-certificates docker docker-compose
    - eval $(ssh-agent -s)
    # Environment variables debugging
    - echo "🔍 GitLab CI/CD Variables Debugging:"
    - echo "- AWS_PEM_DEV exists:" $(if [ -n "$AWS_PEM_DEV" ]; then echo "✅ YES"; else echo "❌ NO"; fi)
    - echo "- AWS_PEM_DEV length:" $(if [ -n "$AWS_PEM_DEV" ]; then echo ${#AWS_PEM_DEV} "characters"; else echo "0 (empty)"; fi)
    - echo "- DEPLOY_SERVER_DEV exists:" $(if [ -n "$DEPLOY_SERVER_DEV" ]; then echo "✅ YES"; else echo "❌ NO"; fi)
    - echo "- DEPLOY_SERVER_DEV value:" $(if [ -n "$DEPLOY_SERVER_DEV" ]; then echo "$DEPLOY_SERVER_DEV"; else echo "(empty)"; fi)
    - echo "- DEV_ENV_FILE exists:" $(if [ -n "$DEV_ENV_FILE" ]; then echo "✅ YES"; else echo "❌ NO"; fi)
    - echo "- DEV_ENV_FILE length:" $(if [ -n "$DEV_ENV_FILE" ]; then echo ${#DEV_ENV_FILE} "characters"; else echo "0 (empty)"; fi)
    - |
      if [ -z "$AWS_PEM_DEV" ]; then
        echo ""
        echo "❌ ERROR: AWS_PEM_DEV variable not configured properly in GitLab CI/CD"
        echo ""
        echo "📋 GitLab CI/CD Variables Configuration Guide:"
        echo "1. Go to: Project → Settings → CI/CD → Variables"
        echo "2. Add these variables:"
        echo "   - AWS_PEM_DEV (Type: File) - EC2 SSH private key content"
        echo "   - DEPLOY_SERVER_DEV (Type: Variable) - EC2 IP/hostname" 
        echo "   - DEV_ENV_FILE (Type: File) - Environment config file"
        echo ""
        echo "⚠️  Make sure to:"
        echo "   - Set 'Protected' to ✅ for all variables"
        echo "   - Set 'Masked' to ❌ for File type variables"
        echo "   - Set 'Masked' to ✅ for Variable type (DEPLOY_SERVER_DEV)"
        echo ""
        echo "🔑 For AWS_PEM_DEV (File type):"
        echo "   - Copy entire SSH private key including:"
        echo "     -----BEGIN OPENSSH PRIVATE KEY-----"
        echo "     [key content]"
        echo "     -----END OPENSSH PRIVATE KEY-----"
        echo ""
        exit 1
      fi
    - echo "✅ All required environment variables are configured"
    - echo "🔑 Setting up SSH key permissions..."
    - chmod 600 "$AWS_PEM_DEV"
    - ssh-add "$AWS_PEM_DEV"
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
    - echo "✅ SSH setup completed successfully"

# 1) Build — Node.js 환경용으로 수정
build-dev:
  stage: build-dev
  image: node:18-alpine
  <<: *rules_dev_main
  before_script:
    - npm config set cache $NPM_CACHE_FOLDER
  script:
    - echo "Building Node.js Blue-Green test environment..."
    # Node.js 의존성 설치 (있는 경우)
    - if [ -f "package.json" ]; then npm ci; fi
    - if [ -f "package.json" ]; then npm run build || echo "No build script defined"; fi
    - echo "Preparing test environment files..."
    - cp "$DEV_ENV_FILE" ./.env || echo "No env file configured"
    - echo "Creating deployment script files..."
    - cp ./deploy-bluegreen.sh ./deploy-green.sh
    - cp ./switch-deployment.sh ./switch-to-green.sh
    - cp ./switch-deployment.sh ./rollback-to-blue.sh
    - cp ./health-check.sh ./cleanup-blue.sh
    - echo "Preparing Docker build context..."
    - ls -al blue-server/ green-server/
    - echo "🔍 Checking shell scripts for artifacts..."
    - ls -la *.sh || echo "No .sh files found in build context"
    - echo "📁 All files for artifacts:"
    - ls -la
  artifacts:
    expire_in: 3 days
    paths:
      - ./blue-server/
      - ./green-server/
      - ./api-server/
      - ./nginx.conf
      - ./conf.d/
      - ./admin.html
      - ./docker-compose.yml
      - ./Dockerfile
      - ./.env
      - ./start.sh
      - ./switch-deployment.sh
      - ./deploy-green.sh
      - ./switch-to-green.sh
      - ./rollback-to-blue.sh
      - ./cleanup-blue.sh
      - ./health-check.sh

# 2) Test — Node.js 기본 테스트
test-dev:
  stage: test-dev
  image: node:18-alpine
  <<: *rules_dev_main
  needs: ["build-dev"]
  dependencies: ["build-dev"]
  script:
    - echo "Running Node.js tests for Blue-Green servers..."
    # Node.js 테스트 (있는 경우)
    - if [ -f "package.json" ]; then npm test || echo "No test script defined"; fi
    - echo "Checking Blue/Green server syntax..."
    - node -c blue-server/app.js
    - node -c green-server/app.js
    - echo "Checking NGINX configuration syntax..."
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - test-results/

# 3) Remote deploy to Docker container — 핵심 수정 부분
deploy-green-dev:
  stage: deploy-dev
  <<: [*alpine_docker_setup, *rules_dev_main]
  needs: ["build-dev","test-dev"]
  dependencies: ["build-dev","test-dev"]
  environment:
    name: green-dev
    url: "http://$DEPLOY_SERVER_DEV:3002"  # Green 서버 포트로 변경
  script:
    - echo "Deploying to Docker-based Blue-Green environment..."
    - echo "🔍 Checking local files before transfer..."
    - ls -la *.sh || echo "No .sh files found locally"
    - echo "📁 Current directory contents:"
    - ls -la
    - echo "Creating target directory..."
    - ssh "ubuntu@$DEPLOY_SERVER_DEV" "mkdir -p ~/bgTest/v5ToWindow"
    - echo "📁 Copying project files to target server..."
    - scp -r ./blue-server/           "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp -r ./green-server/          "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp -r ./api-server/            "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp -r ./conf.d/                "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./.env                      "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/.env"
    - scp ./nginx.conf                "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./docker-compose.yml        "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./Dockerfile                "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./admin.html                "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./start.sh                  "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./switch-deployment.sh      "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./deploy-green.sh           "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./switch-to-green.sh        "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./rollback-to-blue.sh       "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./cleanup-blue.sh           "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./health-check.sh           "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - echo "🔍 Verifying transferred files on EC2..."
    - ssh "ubuntu@$DEPLOY_SERVER_DEV" "cd ~/bgTest/v5ToWindow && ls -la *.sh || echo 'No .sh files found'"
    - echo "🐳 Setting up Docker environment and rebuilding containers..."
    - |
      ssh "ubuntu@$DEPLOY_SERVER_DEV" 'bash -lc "
        # Docker 설치 확인 및 자동 설치
        echo \"🔍 Checking Docker installation...\"
        if ! command -v docker &> /dev/null; then
          echo \"📦 Installing Docker...\"
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker ubuntu
          sudo systemctl start docker
          sudo systemctl enable docker
          echo \"✅ Docker installed successfully\"
        else
          echo \"✅ Docker is already installed\"
        fi
        
        # Docker Compose 설치 확인 및 자동 설치
        if ! command -v docker-compose &> /dev/null; then
          echo \"📦 Installing Docker Compose...\"
          sudo curl -L \"https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
          echo \"✅ Docker Compose installed successfully\"
        else
          echo \"✅ Docker Compose is already installed\"
        fi
        
        # 설치 버전 확인
        docker --version
        docker-compose --version
      "'
    
    # 새 세션에서 Docker 그룹 권한으로 배포 실행
    - ssh "ubuntu@$DEPLOY_SERVER_DEV" 'bash -lc "
        cd ~/bgTest/v5ToWindow && 
        echo \"🔄 Starting deployment process...\" &&
        
        # 기존 컨테이너 정리
        echo \"🛑 Stopping existing containers...\" &&
        sudo docker-compose down --timeout 30 || true &&
        
        # 이전 이미지 정리 (디스크 공간 확보)
        echo \"🧹 Cleaning up old images...\" &&
        sudo docker image prune -f || true &&
        
        # Docker 이미지 재빌드
        echo \"🏗️ Rebuilding Docker image...\" &&
        sudo docker build --no-cache -t blue-green-nginx . &&
        
        # 컨테이너 시작
        echo \"🚀 Starting updated containers...\" &&
        sudo docker-compose up -d &&
        
        # 컨테이너 시작 대기
        echo \"⏳ Waiting for containers to be ready...\" &&
        sleep 20 &&
        
        # 컨테이너 상태 확인
        echo \"📊 Container status:\" &&
        sudo docker ps --filter name=blue-green-nginx &&
        
        # Docker 헬스체크 상태 확인
        echo \"🏥 Docker health status:\" &&
        for i in \$(seq 1 12); do
          health_status=\$(sudo docker inspect --format=\"{{.State.Health.Status}}\" blue-green-nginx 2>/dev/null || echo \"no-healthcheck\")
          echo \"Health check attempt \$i: \$health_status\"
          
          if [ \"\$health_status\" = \"healthy\" ]; then
            echo \"✅ Container is healthy!\"
            break
          elif [ \"\$health_status\" = \"no-healthcheck\" ]; then
            echo \"⚠️ No healthcheck configured, checking manually...\"
            # 수동 헬스체크
            if sudo docker exec blue-green-nginx curl -f http://localhost/status >/dev/null 2>&1; then
              echo \"✅ Manual health check passed!\"
              break
            fi
          fi
          
          if [ \$i -eq 12 ]; then
            echo \"❌ Container failed to become healthy\"
            sudo docker logs --tail 50 blue-green-nginx
            exit 1
          fi
          
          sleep 10
        done &&
        
        echo \"✅ Deployment completed successfully!\"
      "'

# 4) Health check — 개선된 헬스체크 로직
health-check-dev:
  stage: health-check-dev
  <<: [*alpine_docker_setup, *rules_dev_main]
  needs: ["deploy-green-dev"]
  retry: 2
  script:
    - |
      ssh "ubuntu@$DEPLOY_SERVER_DEV" 'bash -lc "
        echo \"🏥 Health checking Blue-Green test environment...\"
        echo \"⏳ Waiting for Docker containers to fully start...\"
        sleep 15
        
        # 컨테이너 상태 확인
        echo \"📊 Docker container status:\"
        sudo docker ps --filter name=blue-green-nginx --format \"table {{.Names}}\t{{.Status}}\t{{.Ports}}\"
        
        # 개선된 헬스체크 로직
        check_service() {
          local service_name=\"\$1\"
          local port=\"\$2\"
          local endpoint=\"\$3\"
          local max_attempts=15
          local success_count=0
          local required_successes=2
          
          echo \"🔍 Checking \$service_name (port \$port, endpoint \$endpoint)...\"
          
          for i in \$(seq 1 \$max_attempts); do
            status=\$(curl -s -o /dev/null -w \"%{http_code}\" \\
                           --max-time 8 --connect-timeout 3 \\
                           --retry 1 --retry-delay 1 \\
                           \"http://localhost:\$port\$endpoint\" 2>/dev/null || echo \"000\")
            
            if [ \"\$status\" = \"200\" ]; then
              success_count=\$((success_count + 1))
              echo \"  ✅ \$service_name OK (attempt \$i) - success \$success_count/\$required_successes\"
              
              if [ \$success_count -ge \$required_successes ]; then
                echo \"  🎉 \$service_name is stable!\"
                return 0
              fi
            else
              success_count=0
              echo \"  ❌ \$service_name not ready (HTTP \$status) - attempt \$i/\$max_attempts\"
            fi
            
            if [ \$i -lt \$max_attempts ]; then
              sleep 3
            fi
          done
          
          echo \"  💥 \$service_name health check failed after \$max_attempts attempts\"
          return 1
        }
        
        # 서비스별 헬스체크 실행
        overall_status=0
        
        # NGINX 프록시 헬스체크
        if ! check_service \"NGINX Proxy\" \"80\" \"/status\"; then
          overall_status=1
          echo \"⚠️ NGINX proxy health check failed\"
          # NGINX 로그 확인
          echo \"📋 NGINX error logs (last 10 lines):\"
          sudo docker exec blue-green-nginx tail -n 10 /var/log/nginx/error.log 2>/dev/null || echo \"No error logs found\"
        fi
        
        # Blue 서버 헬스체크
        if ! check_service \"Blue Server\" \"3001\" \"/health\"; then
          overall_status=1
          echo \"⚠️ Blue server health check failed\"
        fi
        
        # Green 서버 헬스체크
        if ! check_service \"Green Server\" \"3002\" \"/health\"; then
          overall_status=1
          echo \"⚠️ Green server health check failed\"
        fi
        
        # API 서버 헬스체크 (선택적)
        if ! check_service \"API Server\" \"9000\" \"/health\"; then
          echo \"⚠️ API server health check failed (non-critical)\"
          # API 서버는 비필수이므로 overall_status에 영향 주지 않음
        fi
        
        if [ \$overall_status -eq 0 ]; then
          echo \"\"
          echo \"🎉 All critical services are healthy!\"
          echo \"✅ NGINX Proxy: Ready\"
          echo \"✅ Blue Server: Ready\"
          echo \"✅ Green Server: Ready\"
          exit 0
        else
          echo \"\"
          echo \"❌ Health check failed - some services are not ready\"
          echo \"💡 Troubleshooting commands:\"
          echo \"  sudo docker logs blue-green-nginx\"
          echo \"  sudo docker exec blue-green-nginx ps aux\"
          echo \"  sudo docker exec blue-green-nginx netstat -tlnp\"
          exit 1
        fi
      "'

# 5) Switch traffic to GREEN — 원본 구조 유지, 스크립트 호출 방식으로 수정
switch-traffic-dev:
  stage: switch-traffic-dev
  <<: [*alpine_docker_setup, *rules_dev_main]
  needs: ["health-check-dev"]
  environment:
    name: production-dev
    url: "http://$DEPLOY_SERVER_DEV"
  when: manual  # 원본의 수동 실행 정책 유지
  allow_failure: false
  script:
    - ssh "ubuntu@$DEPLOY_SERVER_DEV" 'bash -lc "
        cd ~/bgTest/v5ToWindow && 
        echo \"Switching to Green environment...\" &&
        sudo docker exec blue-green-nginx ./switch-deployment.sh green &&
        echo \"✅ Traffic switched to Green\"
      "'

# 6) Verify after switch — 개선된 헬스체크 로직
verify-dev:
  stage: verify-dev
  image: alpine:latest
  <<: *rules_dev_main
  needs: ["switch-traffic-dev"]
  script:
    - apk add --no-cache curl
    - |
      echo "🔍 Verifying Blue-Green deployment switch..."
      echo "⏳ Waiting for services to be fully ready..."
      sleep 10
      
      # 개선된 헬스체크 로직
      max_attempts=10
      success_count=0
      required_successes=2
      
      for i in $(seq 1 $max_attempts); do
        echo "🔄 Health check attempt $i/$max_attempts..."
        
        # 메인 프록시 헬스체크 (타임아웃 증가)
        main_code=$(curl -s -o /dev/null -w '%{http_code}' \
                         --max-time 10 --connect-timeout 5 \
                         --retry 2 --retry-delay 1 \
                         "http://$DEPLOY_SERVER_DEV/status" 2>/dev/null || echo "000")
        echo "  📊 Main proxy (/status) => HTTP $main_code"
        
        # Green 서버 직접 헬스체크
        green_code=$(curl -s -o /dev/null -w '%{http_code}' \
                          --max-time 10 --connect-timeout 5 \
                          --retry 2 --retry-delay 1 \
                          "http://$DEPLOY_SERVER_DEV:3002/health" 2>/dev/null || echo "000")
        echo "  🟢 Green server => HTTP $green_code"
        
        # Blue 서버도 확인 (전체적인 상태 파악)
        blue_code=$(curl -s -o /dev/null -w '%{http_code}' \
                         --max-time 10 --connect-timeout 5 \
                         --retry 2 --retry-delay 1 \
                         "http://$DEPLOY_SERVER_DEV:3001/health" 2>/dev/null || echo "000")
        echo "  🔵 Blue server => HTTP $blue_code"
        
        # 성공 조건: 메인 프록시와 Green 서버 모두 200
        if [ "$main_code" = "200" ] && [ "$green_code" = "200" ]; then
          success_count=$((success_count + 1))
          echo "  ✅ Success! ($success_count/$required_successes consecutive successes)"
          
          if [ $success_count -ge $required_successes ]; then
            echo ""
            echo "🎉 Verification completed successfully!"
            echo "✅ Main proxy: HTTP $main_code"
            echo "✅ Green server: HTTP $green_code" 
            echo "ℹ️  Blue server: HTTP $blue_code"
            exit 0
          fi
        else
          success_count=0
          echo "  ❌ Failed - resetting success count"
          
          # 디버깅 정보 출력
          if [ "$main_code" != "200" ]; then
            echo "    🔧 Main proxy issue - check NGINX configuration"
          fi
          if [ "$green_code" != "200" ]; then
            echo "    🔧 Green server issue - check Node.js service"
          fi
        fi
        
        # 마지막 시도가 아니면 대기
        if [ $i -lt $max_attempts ]; then
          echo "  ⏳ Waiting 5 seconds before next attempt..."
          sleep 5
        fi
      done
      
      echo ""
      echo "❌ Verification failed after $max_attempts attempts"
      echo "💡 Troubleshooting suggestions:"
      echo "  1. Check EC2 security groups allow ports 80, 3001, 3002"
      echo "  2. Verify Docker containers are running: docker ps"
      echo "  3. Check NGINX logs: docker logs blue-green-nginx"
      echo "  4. Test manual connectivity: curl -v http://$DEPLOY_SERVER_DEV/status"
      exit 1

# 7-a) Cleanup BLUE — 원본 구조 유지, Docker 환경용 수정
cleanup-dev:
  stage: cleanup-dev
  <<: [*alpine_docker_setup, *rules_dev_main]
  needs: ["verify-dev"]
  when: manual  # 원본의 수동 실행 정책 유지
  allow_failure: true
  environment:
    name: blue-dev
    url: "http://$DEPLOY_SERVER_DEV:3001"  # Blue 서버 포트로 변경
  script:
    - ssh "ubuntu@$DEPLOY_SERVER_DEV" 'bash -lc "
        cd ~/bgTest/v5ToWindow && 
        echo \"Cleaning up inactive Blue environment...\" &&
        echo \"Blue environment cleanup completed (container-based)\"
      "'

# 7-b) Rollback to BLUE — 원본 구조 유지, 스크립트 호출 방식으로 수정
rollback-to-blue-dev:
  stage: cleanup-dev
  <<: [*alpine_docker_setup, *rules_dev_main]
  when: manual  # 원본의 수동 실행 정책 유지
  allow_failure: false
  environment:
    name: production-dev
    url: "http://$DEPLOY_SERVER_DEV"
  script:
    - ssh "ubuntu@$DEPLOY_SERVER_DEV" 'bash -lc "
        cd ~/bgTest/v5ToWindow && 
        echo \"Rolling back to Blue environment...\" &&
        sudo docker exec blue-green-nginx ./switch-deployment.sh blue &&
        echo \"✅ Rollback to Blue completed\"
      "'