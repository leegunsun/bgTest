---
# True Blue-Green Deployment CI/CD Pipeline
# Implements zero-downtime deployment with separated container architecture

stages:
  - build-dev
  - test-dev
  - detect-env-dev
  - deploy-inactive-dev
  - health-check-dev
  - zero-downtime-test-dev
  - switch-traffic-dev
  - verify-deployment-dev
  - cleanup-dev

# Common variables
variables:
  GIT_DEPTH: "0"
#  CI_DEBUG_TRACE: "true"  # ÏÉÅÏÑ∏ ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏ ÌôúÏÑ±Ìôî
  NODE_OPTIONS: "--max_old_space_size=2048"
  DOCKER_DRIVER: overlay2
  COMPOSE_FILE: "docker-compose.yml"
  # Dynamic versioning support
  BLUE_VERSION: "${CI_COMMIT_TAG:-${CI_COMMIT_SHORT_SHA}}"
  GREEN_VERSION: "${CI_COMMIT_TAG:-${CI_COMMIT_SHORT_SHA}}"
  DEPLOYMENT_VERSION: "${CI_COMMIT_TAG:-${CI_COMMIT_SHORT_SHA}}"

# Reusable rules
.rules_dev_and_main: &rules_dev_main
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - when: never

# Reusable SSH setup
.ssh_setup: &ssh_setup
  before_script:
    - apk add --no-cache bash openssh-client curl jq docker docker-compose
    - eval $(ssh-agent -s)
    - echo "üîç Validating CI/CD Variables..."
    - |
      if [ -z "$AWS_PEM_DEV" ] || [ -z "$DEPLOY_SERVER_DEV" ]; then
        echo "‚ùå ERROR: Required CI/CD variables not configured"
        echo "Required: AWS_PEM_DEV (File), DEPLOY_SERVER_DEV (Variable)"
        exit 1
      fi
    - chmod 600 "$AWS_PEM_DEV"
    - ssh-add "$AWS_PEM_DEV"
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
    - echo "‚úÖ SSH setup completed"

# 1. Build Stage
build-dev:
  stage: build-dev
  image: node:18-alpine
  <<: *rules_dev_main
  script:
    - echo "üèóÔ∏è  Building Blue-Green unified architecture with version ${DEPLOYMENT_VERSION}..."
    - cp "$DEV_ENV_FILE" ./.env || echo "No env file configured"
    - echo "VERSION=${DEPLOYMENT_VERSION}" >> ./.env
    - echo "üì¶ Preparing artifacts for unified container deployment..."
    - echo "üîß Version configuration:"
    - echo "   BLUE_VERSION=${BLUE_VERSION}"
    - echo "   GREEN_VERSION=${GREEN_VERSION}"
    - echo "   DEPLOYMENT_VERSION=${DEPLOYMENT_VERSION}"
    - ls -la app-service/ api-service/ monitoring/ app-server/ || echo "Service directories ready"
  artifacts:
    expire_in: 3 days
    paths:
      - ./app-service/
      - ./api-service/
      - ./monitoring/
      - ./scripts/
      - ./app-server/
      - ./blue-server/
      - ./green-server/
      - ./nginx.conf
      - ./conf.d/
      - ./admin.html
      - ./docker-compose.yml
      - ./.env

# 2. Test Stage
test-dev:
  stage: test-dev
  image: node:18-alpine
  <<: *rules_dev_main
  needs: ["build-dev"]
  script:
    - echo "üß™ Testing unified services architecture..."
    - node -c app-server/app.js
    - node -c blue-server/app.js
    - node -c green-server/app.js
    - node -c api-service/app-updated.js || node -c api-server/app.js
    - echo "‚úÖ All service syntax checks passed - unified + legacy compatibility"

# 3. Environment Detection
detect-active-environment:
  stage: detect-env-dev
  image: alpine:latest
  <<: [*ssh_setup, *rules_dev_main]
  needs: ["build-dev", "test-dev"]
  script:
#    - set -x  # Î™®Îì† Î™ÖÎ†πÏñ¥ Ï∂úÎ†•
    - echo "üîç Detecting current active environment..."
    - |
      ssh "ubuntu@$DEPLOY_SERVER_DEV" '
        cd ~/bgTest/v5ToWindow
        echo "üìä Environment Detection:"
        
        # Enhanced environment detection with API fallback
        echo "üîç Detecting current environment with multiple methods..."
        
        if docker ps --filter "name=nginx-proxy" --format "table {{.Names}}" | grep -q nginx-proxy; then
          echo "‚úÖ Blue-Green system is running"
          
          # Try API-based detection first (more reliable)
          API_ACTIVE=$(curl -s --max-time 5 "http://localhost:9000/status" | jq -r ".current_deployment" 2>/dev/null || echo "")
          
          # Fallback to file-based detection
          FILE_ACTIVE=$(docker exec nginx-proxy cat /etc/nginx/conf.d/active.env | grep -o "blue\|green" 2>/dev/null || echo "")
          
          # Choose the most reliable source
          if [ -n "$API_ACTIVE" ] && [ "$API_ACTIVE" != "null" ]; then
            CURRENT_ACTIVE="$API_ACTIVE"
            echo "üìä Using API-detected environment: $CURRENT_ACTIVE"
          elif [ -n "$FILE_ACTIVE" ]; then
            CURRENT_ACTIVE="$FILE_ACTIVE"
            echo "üìÑ Using file-detected environment: $CURRENT_ACTIVE"
          else
            CURRENT_ACTIVE="blue"
            echo "‚ö†Ô∏è  No reliable detection, defaulting to: $CURRENT_ACTIVE"
          fi
          
          # True Blue-Green deployment: Deploy to inactive environment
          if [ "$CURRENT_ACTIVE" = "blue" ]; then
            DEPLOY_TARGET="green"
            echo "üîµ‚Üíüü¢ Current: blue, Deploying to: green"
          else
            DEPLOY_TARGET="blue"
            echo "üü¢‚Üíüîµ Current: green, Deploying to: blue"
          fi
        else
          echo "‚ö†Ô∏è  System not running, defaulting to green deployment"
          CURRENT_ACTIVE="blue"
          DEPLOY_TARGET="green"
        fi
        
        echo "Current active: $CURRENT_ACTIVE"
        echo "Deploy target: $DEPLOY_TARGET"
        
        # Save environment info
        echo "$CURRENT_ACTIVE" > ~/current_active.env
        echo "$DEPLOY_TARGET" > ~/deploy_target.env
      '

# 4. Deploy to Inactive Environment ONLY (ZERO DOWNTIME)
deploy-to-inactive-environment:
  stage: deploy-inactive-dev
  image: alpine:latest
  <<: [*ssh_setup, *rules_dev_main]
  needs: ["detect-active-environment"]
  environment:
    name: inactive-env
    url: "http://$DEPLOY_SERVER_DEV"
  script:
    - echo "üöÄ TRUE BLUE-GREEN DEPLOYMENT - Deploy to inactive environment only"
    - echo "üìÅ Transferring unified service architecture..."
    - ssh "ubuntu@$DEPLOY_SERVER_DEV" "mkdir -p ~/bgTest/v5ToWindow"
    - scp -r ./app-service/ "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp -r ./api-service/ "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp -r ./api-server/ "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp -r ./monitoring/ "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp -r ./app-server/ "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp -r ./blue-server/ "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp -r ./green-server/ "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp -r ./conf.d/ "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./docker-compose.yml "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./nginx.conf "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./admin.html "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./.env "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/" || echo "No .env file found, using defaults"
    - echo "üê≥ Deploying ONLY to inactive environment (maintaining zero downtime)..."
    - |
      ssh "ubuntu@$DEPLOY_SERVER_DEV" '
        cd ~/bgTest/v5ToWindow
        
        # True Blue-Green deployment: Deploy to inactive environment
        DEPLOY_TARGET=$(cat ~/deploy_target.env 2>/dev/null || echo "green")
        DEPLOY_VERSION="'${DEPLOYMENT_VERSION}'"
        echo "üéØ Deploying version $DEPLOY_VERSION to $DEPLOY_TARGET environment (True Blue-Green mode)"
        
        # Set version for target environment (True Blue-Green mode)
        if [ "$DEPLOY_TARGET" = "blue" ]; then
          export BLUE_VERSION="$DEPLOY_VERSION"
          echo "BLUE_VERSION=$DEPLOY_VERSION" >> .env
          echo "üîµ True Blue-Green: Setting BLUE_VERSION=$DEPLOY_VERSION"
        else
          export GREEN_VERSION="$DEPLOY_VERSION"
          echo "GREEN_VERSION=$DEPLOY_VERSION" >> .env
          echo "üü¢ True Blue-Green: Setting GREEN_VERSION=$DEPLOY_VERSION"
        fi
        
        # Ensure deployment metadata directory exists
        mkdir -p deployment_state
        
        # Install Docker if needed
        if ! command -v docker &> /dev/null; then
          echo "üì¶ Installing Docker..."
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker ubuntu
          sudo systemctl start docker
          sudo systemctl enable docker
        fi
        
        # Ensure Docker permissions and restart if needed
        sudo usermod -aG docker ubuntu
        sudo systemctl restart docker
        sudo chmod 666 /var/run/docker.sock || true
        newgrp docker || true
        
        # Install debugging tools
        sudo apt-get update -qq >/dev/null 2>&1 || true
        sudo apt-get install -y netcat-openbsd net-tools >/dev/null 2>&1 || true
        
        # Install Docker Compose if needed
        if ! command -v docker-compose &> /dev/null; then
          echo "üì¶ Installing Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
        fi
        
        # Verify Docker is accessible
        echo "üîç Verifying Docker access..."
        if ! docker ps >/dev/null 2>&1 && ! sudo docker ps >/dev/null 2>&1; then
          echo "‚ùå Docker is not accessible. Please check Docker installation and permissions."
          exit 1
        fi
        
        # Check if system is already running
        if docker ps --filter "name=nginx-proxy" --format "table {{.Names}}" | grep -q nginx-proxy; then
          echo "‚úÖ System is running - deploying to inactive $DEPLOY_TARGET environment"
          
          # TRUE ZERO-DOWNTIME DEPLOYMENT - NO CONTAINER STOP/KILL
          echo "üîÑ Zero-downtime deployment to $DEPLOY_TARGET environment..."
          docker-compose -f docker-compose.yml build ${DEPLOY_TARGET}-app || sudo docker-compose -f docker-compose.yml build ${DEPLOY_TARGET}-app
          docker-compose -f docker-compose.yml up -d --no-deps --force-recreate ${DEPLOY_TARGET}-app || sudo docker-compose -f docker-compose.yml up -d --no-deps --force-recreate ${DEPLOY_TARGET}-app
          
          echo "‚è≥ Waiting for $DEPLOY_TARGET environment to be ready..."
          sleep 30
          
        else
          echo "üèóÔ∏è  Initial system deployment - starting all services"
          docker-compose -f docker-compose.yml down --timeout 10 || sudo docker-compose -f docker-compose.yml down --timeout 10 || true
          docker-compose -f docker-compose.yml build || sudo docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml up -d || sudo docker-compose -f docker-compose.yml up -d
          
          echo "‚è≥ Waiting for all services to be ready (t2.micro needs more time)..."
          sleep 120
          
          # ÏÉÅÏÑ∏ ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ ÏàòÏßë
          echo "üîç [DEBUG] Container status check:"
          docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          echo "üîç [DEBUG] Network information:"
          docker network ls
          docker network inspect bluegreen-network | jq ".[0].Containers" || true
          
          echo "üîç [DEBUG] System resource usage:"
          free -h || true
          df -h || true
        fi
        
        # Enhanced Docker-native health checking with internal network validation
        echo "üè• Health checking deployed $DEPLOY_TARGET environment with Docker-native methods..."
        TARGET_PORT=$(if [ "$DEPLOY_TARGET" = "blue" ]; then echo "3001"; else echo "3002"; fi)
        APP_CONTAINER="${DEPLOY_TARGET}-app"
        
        # Helper function: Get Docker health status
        get_docker_health_status() {
          if docker inspect --format='{{json .State.Health}}' "$1" >/dev/null 2>&1; then
            docker inspect --format='{{.State.Health.Status}}' "$1" 2>/dev/null || echo "no-health"
          else
            echo "no-health"
          fi
        }
        
        # Helper function: Internal container health check
        app_internal_health_check() {
          docker exec "$APP_CONTAINER" sh -c "curl -sS -f --max-time 5 http://localhost:$TARGET_PORT/health >/dev/null" 2>/dev/null
          return $?
        }
        
        # Helper function: Network-level health check via ephemeral container
        network_health_check() {
          docker run --rm --network bluegreen-network curlimages/curl:latest \
            -sS -f --max-time 5 "http://${APP_CONTAINER}:${TARGET_PORT}/health" >/dev/null 2>/dev/null
          return $?
        }
        
        # Enhanced health check loop with exponential backoff
        for attempt in $(seq 1 40); do
          echo "üîç Health check attempt $attempt/40 for $DEPLOY_TARGET (container: $APP_CONTAINER)"
          
          # Priority 1: Check Docker-managed health status
          HEALTH_STATUS=$(get_docker_health_status "$APP_CONTAINER")
          echo "üîé Docker Health Status: $HEALTH_STATUS"
          
          if [ "$HEALTH_STATUS" = "healthy" ]; then
            echo "‚úÖ Docker-level health = healthy"
            
            # Version verification via internal network
            DEPLOYED_VERSION=$(docker exec "$APP_CONTAINER" sh -c "curl -s --max-time 3 http://localhost:$TARGET_PORT/version 2>/dev/null | jq -r .version 2>/dev/null" || echo "unknown")
            if [ "$DEPLOYED_VERSION" != "unknown" ]; then
              echo "üìã Deployed version: $DEPLOYED_VERSION"
              DEPLOYMENT_ID=$(docker exec "$APP_CONTAINER" sh -c "curl -s --max-time 3 http://localhost:$TARGET_PORT/version 2>/dev/null | jq -r .deployment_id 2>/dev/null" || echo "unknown")
              echo "üÜî Deployment ID: $DEPLOYMENT_ID"
            fi
            break
          fi
          
          # Priority 2: Internal container health check
          echo "üîç Trying internal container health check (docker exec)..."
          if app_internal_health_check; then
            echo "‚úÖ Internal container health check passed"
            
            # Version verification
            DEPLOYED_VERSION=$(docker exec "$APP_CONTAINER" sh -c "curl -s --max-time 3 http://localhost:$TARGET_PORT/version 2>/dev/null | jq -r .version 2>/dev/null" || echo "unknown")
            echo "üìã Deployed version: $DEPLOYED_VERSION"
            break
          fi
          
          # Priority 3: Network-level health check via Docker network
          echo "üîç Trying network-level health check (ephemeral curl container)..."
          if network_health_check; then
            echo "‚úÖ Network-level health check passed"
            break
          fi
          
          # Enhanced debugging at key intervals
          if [ $attempt -eq 3 ] || [ $attempt -eq 10 ] || [ $attempt -eq 20 ] || [ $attempt -eq 35 ]; then
            echo "üîç [DEBUG] Container status (attempt $attempt):"
            docker ps -a --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}" | grep -E "(nginx|${DEPLOY_TARGET}|api)" || true
            echo "üîç [DEBUG] Container logs (last 15 lines):"
            docker logs --tail 15 "$APP_CONTAINER" 2>&1 | head -20 || echo "‚ùå No logs for $APP_CONTAINER"
            echo "üîç [DEBUG] Container inspect state:"
            docker inspect --format='{{json .State}}' "$APP_CONTAINER" | jq '.Running, .Health.Status, .RestartCount, .ExitCode' 2>/dev/null || echo "‚ùå Inspect failed"
            echo "üîç [DEBUG] Network connectivity test:"
            docker exec "$APP_CONTAINER" sh -c "netstat -tulpn 2>/dev/null | grep :$TARGET_PORT || echo 'Port not bound inside container'"
          fi
          
          # Final attempt failure handling
          if [ $attempt -eq 40 ]; then
            echo "‚ùå $DEPLOY_TARGET environment failed to become healthy after $attempt attempts"
            echo "üîç [FINAL DEBUG] Complete diagnostic information:"
            docker ps -a --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
            echo "üìã Final container logs:"
            docker logs --tail 50 "$APP_CONTAINER" 2>&1 || echo "No $APP_CONTAINER logs"
            docker logs --tail 20 api-server 2>&1 || echo "No api-server logs"  
            docker logs --tail 20 nginx-proxy 2>&1 || echo "No nginx-proxy logs"
            echo "üîç Final network and process state:"
            docker exec "$APP_CONTAINER" sh -c "ps aux; echo '---'; netstat -tulpn" 2>/dev/null || echo "Cannot access container internals"
            exit 1
          fi
          
          # Exponential backoff: progressively increase wait time
          sleep_duration=$(( 3 + attempt * 2 ))
          if [ $sleep_duration -gt 30 ]; then sleep_duration=30; fi
          echo "‚è≥ Waiting ${sleep_duration}s before next attempt (progressive backoff)..."
          sleep "$sleep_duration"
        done
        
        echo "üéâ Inactive environment deployment completed successfully with version tracking!"
      '

# 5. Health Check Inactive Environment
health-check-inactive-environment:
  stage: health-check-dev
  image: alpine:latest
  <<: [*ssh_setup, *rules_dev_main]
  needs: ["deploy-to-inactive-environment"]
  retry: 2
  script:
    - echo "üè• Comprehensive Docker-native health check of inactive environment..."
    - |
      ssh "ubuntu@$DEPLOY_SERVER_DEV" '
        cd ~/bgTest/v5ToWindow
        DEPLOY_TARGET=$(cat ~/deploy_target.env 2>/dev/null || echo "green")
        echo "üéØ Health checking $DEPLOY_TARGET environment using Docker-native methods..."
        
        APP_CONTAINER="${DEPLOY_TARGET}-app"
        TARGET_PORT=$(if [ "$DEPLOY_TARGET" = "blue" ]; then echo "3001"; else echo "3002"; fi)
        
        # Enhanced service health check with multiple validation layers
        check_service_enhanced() {
          local service_name="$1"
          local container_name="$2"
          local internal_port="$3"
          local proxy_url="$4"
          local max_attempts=12
          
          echo "üîç Enhanced health check for $service_name (container: $container_name)..."
          
          for attempt in $(seq 1 $max_attempts); do
            echo "üîç Attempt $attempt/$max_attempts for $service_name"
            
            # Method 1: Docker health status (if available)
            if docker inspect --format="{{.State.Health.Status}}" "$container_name" 2>/dev/null | grep -q "healthy"; then
              echo "‚úÖ $service_name: Docker health status = healthy"
              return 0
            fi
            
            # Method 2: Internal container health check
            if [ -n "$internal_port" ] && docker exec "$container_name" sh -c "curl -sS -f --max-time 3 http://localhost:$internal_port/health >/dev/null" 2>/dev/null; then
              echo "‚úÖ $service_name: Internal health check passed"
              return 0
            fi
            
            # Method 3: Network-level health check via ephemeral container
            if docker run --rm --network bluegreen-network curlimages/curl:latest -sS -f --max-time 3 "http://$container_name:$internal_port/health" >/dev/null 2>/dev/null; then
              echo "‚úÖ $service_name: Network-level health check passed"
              return 0
            fi
            
            # Method 4: Proxy-based health check (fallback for NGINX routing validation)
            if [ -n "$proxy_url" ] && curl -sS -f --max-time 3 "$proxy_url" >/dev/null 2>/dev/null; then
              echo "‚úÖ $service_name: Proxy-based health check passed"
              return 0
            fi
            
            # Progressive wait with exponential backoff
            wait_time=$(( 2 + attempt ))
            if [ $wait_time -gt 15 ]; then wait_time=15; fi
            echo "‚è≥ $service_name not ready, waiting ${wait_time}s... ($attempt/$max_attempts)"
            sleep "$wait_time"
          done
          
          echo "‚ùå $service_name health check failed after $max_attempts attempts"
          return 1
        }
        
        # Check core services with enhanced validation
        overall_status=0
        
        # Check target environment (blue or green) with comprehensive validation
        echo "üéØ Checking target environment: $DEPLOY_TARGET"
        if ! check_service_enhanced "$DEPLOY_TARGET Server" "$APP_CONTAINER" "$TARGET_PORT" "http://localhost/$DEPLOY_TARGET/health"; then
          overall_status=1
        fi
        
        # Check NGINX proxy with internal and external validation
        echo "üåê Checking NGINX Proxy"
        if ! check_service_enhanced "NGINX Proxy" "nginx-proxy" "" "http://localhost:80/health"; then
          echo "‚ö†Ô∏è NGINX proxy health check failed, but continuing..."
          # Note: Not failing overall status for NGINX as it might have different health endpoint behavior
        fi
        
        # Check API Server with internal-only validation (not exposed externally)
        echo "üîå Checking API Server (internal access only)"
        api_status=0
        if docker exec api-server sh -c "curl -sS -f --max-time 5 http://localhost:9000/health >/dev/null" 2>/dev/null; then
          echo "‚úÖ API Server: Internal health check passed"
        elif docker run --rm --network bluegreen-network curlimages/curl:latest -sS -f --max-time 5 "http://api-server:9000/health" >/dev/null 2>/dev/null; then
          echo "‚úÖ API Server: Network-level health check passed"
        else
          echo "‚ùå API Server health check failed"
          api_status=1
        fi
        
        # Enhanced debugging information
        if [ $overall_status -ne 0 ] || [ $api_status -ne 0 ]; then
          echo "üîç [DEBUG] System diagnostic information:"
          docker ps -a --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}" | grep -E "(nginx|${DEPLOY_TARGET}|api)"
          echo "üîç [DEBUG] Container health states:"
          for container in nginx-proxy "$APP_CONTAINER" api-server; do
            if docker ps --format "{{.Names}}" | grep -q "^$container\$"; then
              health_status=$(docker inspect --format="{{.State.Health.Status}}" "$container" 2>/dev/null || echo "no-healthcheck")
              running_status=$(docker inspect --format="{{.State.Running}}" "$container" 2>/dev/null || echo "unknown")
              echo "  $container: Running=$running_status, Health=$health_status"
            fi
          done
          
          echo "üîç [DEBUG] Recent container logs:"
          docker logs --tail 10 "$APP_CONTAINER" 2>&1 | head -15 || echo "No logs for $APP_CONTAINER"
          docker logs --tail 10 nginx-proxy 2>&1 | head -15 || echo "No logs for nginx-proxy"
        fi
        
        # Final status evaluation
        if [ $overall_status -eq 0 ]; then
          if [ $api_status -eq 0 ]; then
            echo "üéâ All services are healthy - ready for traffic switch!"
          else
            echo "‚ö†Ô∏è Target environment is healthy but API server has issues - proceeding with caution"
          fi
        else
          echo "‚ùå Health check failed - deployment cannot proceed"
          echo "üîç Final container states:"
          docker ps -a --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
          exit 1
        fi
      '

# 6. Zero-Downtime Test (Critical Validation).
zero-downtime-validation:
  stage: zero-downtime-test-dev
  image: alpine:latest
  <<: [*ssh_setup, *rules_dev_main]
  needs: ["health-check-inactive-environment"]
  script:
    - echo "üß™ Running zero-downtime deployment validation..."
    - |
      ssh "ubuntu@$DEPLOY_SERVER_DEV" '
        cd ~/bgTest/v5ToWindow
        echo "üöÄ Starting enhanced zero-downtime validation before traffic switch..."
        
        # Enhanced multi-layer service availability validation
        echo "üìä Multi-layer service availability validation..."
        
        # Enhanced helper function: Check Docker container health with null handling
        check_docker_health() {
          local container="$1"
          local health_status=$(docker inspect --format="{{.State.Health.Status}}" "$container" 2>/dev/null || echo "no-health")
          local running_status=$(docker inspect --format="{{.State.Running}}" "$container" 2>/dev/null || echo "false")
          echo "üîç $container: Running=$running_status, Health=$health_status"
          
          # Handle case where .State.Health is null (no healthcheck configured)
          if [ "$health_status" = "no-health" ] || [ "$health_status" = "<no value>" ]; then
            echo "‚ö†Ô∏è  $container: No Docker healthcheck configured (State.Health is null)"
            # Container is considered healthy if running and no explicit healthcheck failure
            if [ "$running_status" = "true" ]; then
              echo "‚úÖ $container: Container running without healthcheck (acceptable)"
              return 0
            fi
          elif [ "$running_status" = "true" ] && [ "$health_status" = "healthy" ]; then
            return 0
          fi
          return 1
        }
        
        # Helper function: Internal container service check
        check_internal_service() {
          local container="$1"
          local port="$2"
          local endpoint="$3"
          
          if docker exec "$container" sh -c "curl -sS -f --max-time 5 http://localhost:$port$endpoint >/dev/null" 2>/dev/null; then
            echo "‚úÖ Internal service check: $container:$port$endpoint"
            return 0
          fi
          echo "‚ùå Internal service check failed: $container:$port$endpoint"
          return 1
        }
        
        # Helper function: Network-level service check
        check_network_service() {
          local service="$1"
          local port="$2"
          local endpoint="$3"
          
          if docker run --rm --network bluegreen-network curlimages/curl:latest \
             -sS -f --max-time 5 "http://$service:$port$endpoint" >/dev/null 2>/dev/null; then
            echo "‚úÖ Network service check: $service:$port$endpoint"
            return 0
          fi
          echo "‚ùå Network service check failed: $service:$port$endpoint"
          return 1
        }
        
        # NGINX-specific helper function: Configuration validation
        check_nginx_config() {
          local container="$1"
          echo "üîß Checking NGINX configuration syntax..."
          
          if docker exec "$container" nginx -t >/dev/null 2>&1; then
            echo "‚úÖ NGINX configuration syntax is valid"
            return 0
          else
            echo "‚ùå NGINX configuration syntax error:"
            docker exec "$container" nginx -t 2>&1 | head -10
            return 1
          fi
        }
        
        # NGINX-specific helper function: HTTP header validation
        check_nginx_http_headers() {
          local endpoint="$1"
          local timeout="${2:-5}"
          echo "üìã Checking HTTP headers: $endpoint"
          
          # Check HTTP headers (as recommended in reference)
          local headers=$(curl -sI --max-time "$timeout" "$endpoint" 2>/dev/null || echo "CURL_FAILED")
          
          if echo "$headers" | grep -q "HTTP.*200" && echo "$headers" | grep -qi "server.*nginx"; then
            echo "‚úÖ HTTP headers valid: $endpoint (NGINX server responding)"
            return 0
          elif echo "$headers" | grep -q "HTTP.*200"; then
            echo "‚ö†Ô∏è  HTTP 200 OK but no NGINX server header: $endpoint"
            return 0  # Still acceptable as long as HTTP 200
          else
            echo "‚ùå HTTP header check failed: $endpoint"
            echo "Response: $(echo "$headers" | head -3 | tr '\n' ' ')"
            return 1
          fi
        }
        
        # NGINX-specific helper function: Container-internal validation
        check_nginx_internal() {
          local container="$1"
          local port="$2"
          echo "üîç Checking NGINX internal service..."
          
          # Install curl if needed (as recommended in reference)
          docker exec "$container" sh -c "command -v curl >/dev/null || (apk add --no-cache curl >/dev/null 2>&1 || apt-get update -qq && apt-get install -y curl >/dev/null 2>&1)" 2>/dev/null || true
          
          # Internal curl check (as recommended in reference)
          if docker exec "$container" sh -c "curl -sSf http://localhost:$port/ -o /dev/null" 2>/dev/null; then
            echo "‚úÖ NGINX internal service check passed"
            return 0
          else
            echo "‚ùå NGINX internal service check failed"
            return 1
          fi
        }
        
        # Enhanced NGINX diagnostics function
        nginx_diagnostics() {
          local container="$1"
          echo "üîç [NGINX DIAGNOSTICS] Gathering NGINX-specific diagnostic information..."
          
          echo "üîç [NGINX] Container process status:"
          docker exec "$container" ps aux | grep nginx | head -5 || echo "Cannot access nginx processes"
          
          echo "üîç [NGINX] Configuration test:"
          docker exec "$container" nginx -t 2>&1 || echo "Cannot test nginx configuration"
          
          echo "üîç [NGINX] Access logs (last 10 lines):"
          docker exec "$container" tail -10 /var/log/nginx/access.log 2>/dev/null || echo "No access logs available"
          
          echo "üîç [NGINX] Error logs (last 10 lines):"
          docker exec "$container" tail -10 /var/log/nginx/error.log 2>/dev/null || echo "No error logs available"
          
          echo "üîç [NGINX] Port binding status:"
          docker exec "$container" netstat -tulpn 2>/dev/null | grep :80 || echo "Cannot access netstat info"
        }
        
        # Enhanced validation with progressive retry
        max_attempts=20
        validation_passed=false
        
        for attempt in $(seq 1 $max_attempts); do
          echo "üîç Validation attempt $attempt/$max_attempts"
          overall_health=0
          
          # Layer 1: Check all critical Docker containers
          echo "üìã Layer 1: Docker container health validation"
          for container in nginx-proxy api-server; do
            if check_docker_health "$container"; then
              echo "‚úÖ $container container is healthy"
            else
              echo "‚ùå $container container health check failed"
              overall_health=1
            fi
          done
          
          # Layer 2: NGINX-specific configuration and internal service validation 
          echo "üìã Layer 2: NGINX-specific validation and internal services"
          
          # NGINX configuration syntax validation (as recommended in reference)
          if check_nginx_config "nginx-proxy"; then
            nginx_config_ok=1
          else
            nginx_config_ok=0
            overall_health=1
          fi
          
          # NGINX internal service validation (as recommended in reference)
          if check_nginx_internal "nginx-proxy" "80"; then
            nginx_internal_ok=1
          else
            # Fallback to standard internal check
            if check_internal_service "nginx-proxy" "80" "/status"; then
              nginx_internal_ok=1
              echo "‚úÖ NGINX internal check via fallback method"
            else
              nginx_internal_ok=0
              overall_health=1
            fi
          fi
          
          # API server internal validation
          if check_internal_service "api-server" "9000" "/health"; then
            api_internal_ok=1
          else
            api_internal_ok=0
            overall_health=1
          fi
          
          # Layer 3: Network-level validation
          echo "üìã Layer 3: Network-level service validation"
          if check_network_service "nginx-proxy" "80" "/status"; then
            nginx_network_ok=1
          else
            nginx_network_ok=0
            overall_health=1
          fi
          
          # Layer 4: Enhanced external HTTP validation with NGINX headers
          echo "üìã Layer 4: Enhanced HTTP endpoint validation with NGINX headers"
          external_health=0
          
          # HTTP header validation (as recommended in reference)
          echo "üîç Checking HTTP headers first (recommended approach)..."
          if check_nginx_http_headers "http://localhost:80" 5; then
            external_health=1
            echo "‚úÖ NGINX HTTP header validation successful"
          fi
          
          # Fallback: Try multiple endpoints with increasing timeouts if header check failed
          if [ $external_health -eq 0 ]; then
            echo "üîç Fallback: Trying multiple endpoints with progressive timeouts..."
            for endpoint in "/status" "/health"; do
              for timeout in 3 5 8; do
                if curl -sS -f --max-time $timeout "http://localhost:80$endpoint" >/dev/null 2>&1; then
                  echo "‚úÖ External HTTP fallback check passed: localhost:80$endpoint (${timeout}s timeout)"
                  external_health=1
                  break 2
                fi
              done
            done
          fi
          
          # Final HTTP validation using reference approach
          if [ $external_health -eq 0 ]; then
            echo "üîç Final validation using reference method..."
            if curl -sSf http://localhost:80/ -o /dev/null 2>&1; then
              echo "‚úÖ Final HTTP check passed using reference method"
              external_health=1
            fi
          fi
          
          if [ $external_health -eq 0 ]; then
            echo "‚ùå All external HTTP validation methods failed"
            overall_health=1
          fi
          
          # Overall validation assessment
          if [ $overall_health -eq 0 ]; then
            echo "üéâ All validation layers passed - system is stable!"
            validation_passed=true
            break
          fi
          
          # Enhanced debugging for failed attempts with NGINX-specific diagnostics
          if [ $attempt -eq 5 ] || [ $attempt -eq 10 ] || [ $attempt -eq 15 ]; then
            echo "üîç [DEBUG] Detailed system state (attempt $attempt):"
            docker ps -a --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}" | grep -E "(nginx|api)"
            
            echo "üîç [DEBUG] Standard container logs:"
            docker logs --tail 10 nginx-proxy 2>&1 | head -15 || echo "No nginx-proxy logs"
            docker logs --tail 10 api-server 2>&1 | head -15 || echo "No api-server logs"
            
            # NGINX-specific diagnostics (as recommended in reference)
            nginx_diagnostics "nginx-proxy"
            
            echo "üîç [DEBUG] Enhanced manual testing (reference methods):"
            echo "  Testing curl -I (HTTP headers):"
            curl -I --max-time 10 "http://localhost:80" 2>&1 | head -10 || echo "Header test failed"
            echo "  Testing curl -sSf (reference method):"
            curl -sSf http://localhost:80/ -o /dev/null && echo "Reference curl test: OK" || echo "Reference curl test: FAIL"
            echo "  Testing basic curl -v:"
            curl -v --max-time 10 "http://localhost:80/status" 2>&1 | head -20 || echo "Verbose curl test failed"
          fi
          
          # Progressive backoff with cap
          wait_time=$(( 2 + attempt ))
          if [ $wait_time -gt 15 ]; then wait_time=15; fi
          echo "‚è≥ Waiting ${wait_time}s before next validation attempt..."
          sleep "$wait_time"
        done
        
        # Final validation result
        if [ "$validation_passed" = true ]; then
          echo "‚úÖ Zero-downtime validation successful - system is ready for traffic switch"
        else
          echo "‚ùå Zero-downtime validation failed after $max_attempts attempts"
          echo "üîç [FINAL DEBUG] Comprehensive system diagnostic summary:"
          docker ps -a --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
          
          echo "üîç [FINAL DEBUG] Complete NGINX diagnostics:"
          nginx_diagnostics "nginx-proxy"
          
          echo "üîç [FINAL DEBUG] All reference validation methods:"
          echo "  1. HTTP Headers (curl -I):"
          curl -I --max-time 10 "http://localhost:80" 2>&1 | head -10 || echo "Final header test failed"
          echo "  2. Reference method (curl -sSf):"
          curl -sSf http://localhost:80/ -o /dev/null && echo "Final reference test: OK" || echo "Final reference test: FAIL"
          echo "  3. Verbose curl output:"
          curl -v --max-time 10 "http://localhost:80/status" 2>&1 | head -30 || echo "Final verbose curl failed"
          echo "  4. NGINX configuration final check:"
          docker exec nginx-proxy nginx -t 2>&1 || echo "Final nginx config check failed"
          
          exit 1
        fi
      '

# 7. Switch Traffic (Manual Approval Required).
switch-traffic-to-inactive:
  stage: switch-traffic-dev
  image: alpine:latest
  <<: [*ssh_setup, *rules_dev_main]
  needs: ["zero-downtime-validation"]
  environment:
    name: production-dev
    url: "http://$DEPLOY_SERVER_DEV"
  when: manual
  allow_failure: false
  script:
    - echo "üîÑ ZERO-DOWNTIME TRAFFIC SWITCH - Manual approval granted"
    - |
      ssh "ubuntu@$DEPLOY_SERVER_DEV" '
        cd ~/bgTest/v5ToWindow
        DEPLOY_TARGET=$(cat ~/deploy_target.env 2>/dev/null || echo "green")
        
        echo "üö¶ Switching traffic to $DEPLOY_TARGET environment (True Blue-Green mode)..."
        
        # Execute traffic switch via API
        switch_response=$(curl -s -X POST "http://localhost:9000/switch/$DEPLOY_TARGET" || echo "{\"success\":false}")
        
        if echo "$switch_response" | jq -e ".success" >/dev/null 2>&1; then
          echo "‚úÖ Traffic successfully switched to $DEPLOY_TARGET"
          echo "üìä Switch details: $switch_response"
        else
          echo "‚ùå Traffic switch failed: $switch_response"
          exit 1
        fi
        
        # Verify switch
        sleep 5
        if curl -f "http://localhost:80/status" >/dev/null 2>&1; then
          echo "‚úÖ Traffic switch verification successful"
        else
          echo "‚ùå Traffic switch verification failed"
          exit 1
        fi
      '

# 8. Deployment Verification
verify-deployment:
  stage: verify-deployment-dev
  image: alpine:latest
  <<: [*ssh_setup, *rules_dev_main]
  needs: ["switch-traffic-to-inactive"]
  script:
    - echo "üîç Verifying zero-downtime deployment completion..."
    - |
      ssh "ubuntu@$DEPLOY_SERVER_DEV" '
        cd ~/bgTest/v5ToWindow
        
        echo "üìä Post-deployment verification..."
        
        # Extended availability test
        failed_checks=0
        total_checks=50
        
        for i in $(seq 1 $total_checks); do
          if ! curl -f --max-time 3 "http://localhost:80/status" >/dev/null 2>&1; then
            failed_checks=$((failed_checks + 1))
          fi
          sleep 1
        done
        
        availability=$(echo "scale=2; (1 - $failed_checks/$total_checks) * 100" | bc -l || echo "100")
        
        echo "üìà Deployment verification results:"
        echo "   - Total checks: $total_checks"
        echo "   - Failed checks: $failed_checks"
        echo "   - Availability: ${availability}%"
        
        if [ "$failed_checks" -eq 0 ]; then
          echo "üéâ ZERO-DOWNTIME DEPLOYMENT SUCCESSFUL!"
          echo "‚úÖ Perfect availability achieved: 100%"
        elif [ "$failed_checks" -le 2 ]; then
          echo "‚ö†Ô∏è  Deployment completed with minor issues"
          echo "   Availability: ${availability}%"
        else
          echo "‚ùå Deployment verification failed"
          echo "   Too many availability issues detected"
          exit 1
        fi
      '

# 9. Cleanup Previous Environment (Manual)
cleanup-previous-environment:
  stage: cleanup-dev
  image: alpine:latest
  <<: [*ssh_setup, *rules_dev_main]
  needs: ["verify-deployment"]
  when: manual
  allow_failure: true
  script:
    - echo "üßπ Cleaning up previous environment..."
    - |
      ssh "ubuntu@$DEPLOY_SERVER_DEV" '
        cd ~/bgTest/v5ToWindow
        CURRENT_ACTIVE=$(cat ~/current_active.env 2>/dev/null || echo "blue")
        
        echo "üóëÔ∏è  Optionally scaling down previous $CURRENT_ACTIVE environment..."
        echo "   (Both environments remain available for instant rollback)"
        echo "   Previous environment: $CURRENT_ACTIVE"
        echo "   Cleanup completed"
      '

# 10. Emergency Rollback (Manual)
emergency-rollback:
  stage: cleanup-dev
  image: alpine:latest
  <<: [*ssh_setup, *rules_dev_main]
  when: manual
  allow_failure: false
  environment:
    name: production-dev
    url: "http://$DEPLOY_SERVER_DEV"
  script:
    - echo "üö® EMERGENCY ROLLBACK - Immediate traffic restoration"
    - |
      ssh "ubuntu@$DEPLOY_SERVER_DEV" '
        cd ~/bgTest/v5ToWindow
        PREVIOUS_ACTIVE=$(cat ~/current_active.env 2>/dev/null || echo "blue")
        
        echo "üîÑ Emergency rollback to $PREVIOUS_ACTIVE environment..."
        
        # Execute rollback via API
        rollback_response=$(curl -s -X POST "http://localhost:9000/switch/$PREVIOUS_ACTIVE" || echo "{\"success\":false}")
        
        if echo "$rollback_response" | jq -e ".success" >/dev/null 2>&1; then
          echo "‚úÖ Emergency rollback successful - traffic restored to $PREVIOUS_ACTIVE"
        else
          echo "‚ùå Emergency rollback failed - manual intervention required"
          exit 1
        fi
        
        # Verify rollback
        if curl -f "http://localhost:80/status" >/dev/null 2>&1; then
          echo "‚úÖ Rollback verification successful"
        else
          echo "‚ùå Rollback verification failed"
        fi
      '