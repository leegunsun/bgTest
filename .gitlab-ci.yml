# .gitlab-ci.yml — DEV Blue/Green 파이프라인 (테스트 환경용)
# 기존 프로덕션 규칙을 보존하면서 Node.js 테스트 환경에 최적화

stages:
  - build-dev
  - test-dev
  - deploy-dev
  - health-check-dev
  - switch-traffic-dev
  - verify-dev
  - cleanup-dev

# 공통 변수 (테스트 환경용 수정)
variables:
  GIT_DEPTH: "0"
  NODE_OPTIONS: "--max_old_space_size=2048"
  NPM_CACHE_FOLDER: "$CI_PROJECT_DIR/.npm"
  DOCKER_DRIVER: overlay2

# NPM 캐시 — 브랜치별로 분리
cache:
  key: "npm-$CI_COMMIT_REF_SLUG"
  paths:
    - .npm
    - node_modules/

# 재사용 규칙 (dev, main 브랜치만) — 원본 유지
.rules_dev_and_main: &rules_dev_main
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - when: never

# 재사용 Alpine 세팅 (ssh, curl, docker 등) — 원본 기반 확장
.alpine_docker_setup: &alpine_docker_setup
  image: alpine:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache bash openssh-client curl ca-certificates docker docker-compose
    - eval $(ssh-agent -s)
    # Environment variables debugging
    - echo "🔍 GitLab CI/CD Variables Debugging:"
    - echo "- AWS_PEM_DEV exists:" $(if [ -n "$AWS_PEM_DEV" ]; then echo "✅ YES"; else echo "❌ NO"; fi)
    - echo "- AWS_PEM_DEV length:" $(if [ -n "$AWS_PEM_DEV" ]; then echo ${#AWS_PEM_DEV} "characters"; else echo "0 (empty)"; fi)
    - echo "- DEPLOY_SERVER_DEV exists:" $(if [ -n "$DEPLOY_SERVER_DEV" ]; then echo "✅ YES"; else echo "❌ NO"; fi)
    - echo "- DEPLOY_SERVER_DEV value:" $(if [ -n "$DEPLOY_SERVER_DEV" ]; then echo "$DEPLOY_SERVER_DEV"; else echo "(empty)"; fi)
    - echo "- DEV_ENV_FILE exists:" $(if [ -n "$DEV_ENV_FILE" ]; then echo "✅ YES"; else echo "❌ NO"; fi)
    - echo "- DEV_ENV_FILE length:" $(if [ -n "$DEV_ENV_FILE" ]; then echo ${#DEV_ENV_FILE} "characters"; else echo "0 (empty)"; fi)
    - |
      if [ -z "$AWS_PEM_DEV" ]; then
        echo ""
        echo "❌ ERROR: AWS_PEM_DEV variable not configured properly in GitLab CI/CD"
        echo ""
        echo "📋 GitLab CI/CD Variables Configuration Guide:"
        echo "1. Go to: Project → Settings → CI/CD → Variables"
        echo "2. Add these variables:"
        echo "   - AWS_PEM_DEV (Type: File) - EC2 SSH private key content"
        echo "   - DEPLOY_SERVER_DEV (Type: Variable) - EC2 IP/hostname" 
        echo "   - DEV_ENV_FILE (Type: File) - Environment config file"
        echo ""
        echo "⚠️  Make sure to:"
        echo "   - Set 'Protected' to ✅ for all variables"
        echo "   - Set 'Masked' to ❌ for File type variables"
        echo "   - Set 'Masked' to ✅ for Variable type (DEPLOY_SERVER_DEV)"
        echo ""
        echo "🔑 For AWS_PEM_DEV (File type):"
        echo "   - Copy entire SSH private key including:"
        echo "     -----BEGIN OPENSSH PRIVATE KEY-----"
        echo "     [key content]"
        echo "     -----END OPENSSH PRIVATE KEY-----"
        echo ""
        exit 1
      fi
    - echo "✅ All required environment variables are configured"
    - echo "🔑 Setting up SSH key permissions..."
    - chmod 600 "$AWS_PEM_DEV"
    - ssh-add "$AWS_PEM_DEV"
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
    - echo "✅ SSH setup completed successfully"

# 1) Build — Node.js 환경용으로 수정
build-dev:
  stage: build-dev
  image: node:18-alpine
  <<: *rules_dev_main
  before_script:
    - npm config set cache $NPM_CACHE_FOLDER
  script:
    - echo "Building Node.js Blue-Green test environment..."
    # Node.js 의존성 설치 (있는 경우)
    - if [ -f "package.json" ]; then npm ci; fi
    - if [ -f "package.json" ]; then npm run build || echo "No build script defined"; fi
    
    # 테스트 환경 파일 준비
    - cp "$DEV_ENV_FILE" ./.env || echo "No env file configured"
    
    # 배포 스크립트 파일 생성 (원본 패턴 유지)
    - cp ./deploy-bluegreen.sh ./deploy-green.sh
    - cp ./switch-deployment.sh ./switch-to-green.sh
    - cp ./switch-deployment.sh ./rollback-to-blue.sh
    - cp ./health-check.sh ./cleanup-blue.sh
    
    # Docker 이미지 빌드 준비
    - echo "Preparing Docker build context..."
    - ls -al blue-server/ green-server/
    
  artifacts:
    expire_in: 3 days
    paths:
      - ./blue-server/
      - ./green-server/  
      - ./nginx.conf
      - ./conf.d/
      - ./admin.html
      - ./docker-compose.yml
      - ./Dockerfile
      - ./.env
      - ./deploy-green.sh
      - ./switch-to-green.sh
      - ./rollback-to-blue.sh
      - ./cleanup-blue.sh
      - ./health-check.sh

# 2) Test — Node.js 기본 테스트
test-dev:
  stage: test-dev
  image: node:18-alpine
  <<: *rules_dev_main
  needs: ["build-dev"]
  dependencies: ["build-dev"]
  script:
    - echo "Running Node.js tests for Blue-Green servers..."
    # Node.js 테스트 (있는 경우)
    - if [ -f "package.json" ]; then npm test || echo "No test script defined"; fi
    
    # Blue/Green 서버 구문 검사
    - node -c blue-server/app.js
    - node -c green-server/app.js
    
    # NGINX 설정 검사 (로컬에서)
    - echo "Checking NGINX configuration syntax..."
    
  artifacts:
    when: always
    expire_in: 3 days
    paths:
      - test-results/

# 3) Remote deploy to Docker container — 핵심 수정 부분
deploy-green-dev:
  stage: deploy-dev
  <<: *alpine_docker_setup
  <<: *rules_dev_main
  needs: ["build-dev","test-dev"]
  dependencies: ["build-dev","test-dev"]
  environment:
    name: green-dev
    url: "http://$DEPLOY_SERVER_DEV:3002"  # Green 서버 포트로 변경
  script:
    - echo "Deploying to Docker-based Blue-Green environment..."
    
    # 대상 디렉토리 생성 (없을 경우를 대비)
    - ssh "ubuntu@$DEPLOY_SERVER_DEV" "mkdir -p ~/bgTest/v5ToWindow"
    
    # 전체 프로젝트 파일 복사
    - scp -r ./blue-server/           "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp -r ./green-server/          "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp -r ./conf.d/                "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./.env                      "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/.env"
    - scp ./nginx.conf                "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./docker-compose.yml        "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./Dockerfile                "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./admin.html                "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./deploy-green.sh           "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./switch-to-green.sh        "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./rollback-to-blue.sh       "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./cleanup-blue.sh           "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    - scp ./health-check.sh           "ubuntu@$DEPLOY_SERVER_DEV:~/bgTest/v5ToWindow/"
    
    # Docker 환경 설정 및 컨테이너 재빌드
    - |
      ssh "ubuntu@$DEPLOY_SERVER_DEV" 'bash -lc "
        # Docker 설치 확인 및 자동 설치
        echo \"🔍 Checking Docker installation...\"
        if ! command -v docker &> /dev/null; then
          echo \"📦 Installing Docker...\"
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker ubuntu
          sudo systemctl start docker
          sudo systemctl enable docker
          echo \"✅ Docker installed successfully\"
        else
          echo \"✅ Docker is already installed\"
        fi
        
        # Docker Compose 설치 확인 및 자동 설치
        if ! command -v docker-compose &> /dev/null; then
          echo \"📦 Installing Docker Compose...\"
          sudo curl -L \"https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
          echo \"✅ Docker Compose installed successfully\"
        else
          echo \"✅ Docker Compose is already installed\"
        fi
        
        # 설치 버전 확인
        docker --version
        docker-compose --version
      "'
    
    # 새 세션에서 Docker 그룹 권한으로 배포 실행
    - ssh "ubuntu@$DEPLOY_SERVER_DEV" 'bash -lc "
        cd ~/bgTest/v5ToWindow && 
        echo \"Stopping existing containers...\" &&
        sudo docker-compose down || true &&
        echo \"Rebuilding Docker image...\" &&
        sudo docker build -t blue-green-nginx . &&
        echo \"Starting updated containers...\" &&
        sudo docker-compose up -d &&
        echo \"✅ Deployment completed\"
      "'

# 4) Health check — 포트와 엔드포인트 수정
health-check-dev:
  stage: health-check-dev
  <<: *alpine_docker_setup
  <<: *rules_dev_main
  needs: ["deploy-green-dev"]
  retry: 1
  script:
    - |
      ssh "ubuntu@$DEPLOY_SERVER_DEV" 'bash -lc "
        echo \"Health checking Blue-Green test environment...\"
        
        # NGINX 프록시 헬스체크
        echo \"Checking NGINX proxy (port 80)...\"
        for i in \$(seq 1 10); do
          status=\$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:80/status || true)
          if [ \"\$status\" = \"200\" ]; then
            echo \"✓ NGINX proxy OK on attempt \$i\"
            break
          fi
          echo \"NGINX not ready (HTTP \$status). retry=\$i\"
          sleep 5
        done
        
        # Blue 서버 헬스체크 (포트 3001)
        echo \"Checking Blue server (port 3001)...\"
        for i in \$(seq 1 10); do
          status=\$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3001/health || true)
          if [ \"\$status\" = \"200\" ]; then
            echo \"✓ Blue server OK on attempt \$i\"
            break
          fi
          echo \"Blue server not ready (HTTP \$status). retry=\$i\"
          sleep 3
        done
        
        # Green 서버 헬스체크 (포트 3002)  
        echo \"Checking Green server (port 3002)...\"
        for i in \$(seq 1 10); do
          status=\$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3002/health || true)
          if [ \"\$status\" = \"200\" ]; then
            echo \"✓ Green server OK on attempt \$i\"
            exit 0
          fi
          echo \"Green server not ready (HTTP \$status). retry=\$i\"
          sleep 3
        done
        
        echo \"Health check failed after 10 tries\"
        exit 1
      "'

# 5) Switch traffic to GREEN — 원본 구조 유지, 스크립트 호출 방식으로 수정
switch-traffic-dev:
  stage: switch-traffic-dev
  <<: *alpine_docker_setup
  <<: *rules_dev_main
  needs: ["health-check-dev"]
  environment:
    name: production-dev
    url: "http://$DEPLOY_SERVER_DEV"
  when: manual  # 원본의 수동 실행 정책 유지
  allow_failure: false
  script:
    - ssh "ubuntu@$DEPLOY_SERVER_DEV" 'bash -lc "
        cd ~/bgTest/v5ToWindow && 
        echo \"Switching to Green environment...\" &&
        sudo docker exec blue-green-nginx ./switch-deployment.sh green &&
        echo \"✅ Traffic switched to Green\"
      "'

# 6) Verify after switch — 엔드포인트 수정
verify-dev:
  stage: verify-dev
  image: alpine:latest
  <<: *rules_dev_main
  needs: ["switch-traffic-dev"]
  script:
    - apk add --no-cache curl
    - |
      echo "Verifying Blue-Green deployment switch..."
      for i in $(seq 1 5); do
        # 메인 프록시를 통한 접근 확인
        code=$(curl -s -o /dev/null -w '%{http_code}' "http://$DEPLOY_SERVER_DEV/" || true)
        echo "Main proxy attempt $i => HTTP $code"
        
        # Green 서버 직접 접근 확인
        green_code=$(curl -s -o /dev/null -w '%{http_code}' "http://$DEPLOY_SERVER_DEV:3002/health" || true)  
        echo "Green server attempt $i => HTTP $green_code"
        
        if [ "$code" = "200" ] && [ "$green_code" = "200" ]; then
          echo "✓ Verification successful"
          exit 0
        fi
        sleep 3
      done
      echo "✗ Verification failed"
      exit 1

# 7-a) Cleanup BLUE — 원본 구조 유지, Docker 환경용 수정
cleanup-dev:
  stage: cleanup-dev
  <<: *alpine_docker_setup
  <<: *rules_dev_main
  needs: ["verify-dev"]
  when: manual  # 원본의 수동 실행 정책 유지
  allow_failure: true
  environment:
    name: blue-dev
    url: "http://$DEPLOY_SERVER_DEV:3001"  # Blue 서버 포트로 변경
  script:
    - ssh "ubuntu@$DEPLOY_SERVER_DEV" 'bash -lc "
        cd ~/bgTest/v5ToWindow && 
        echo \"Cleaning up inactive Blue environment...\" &&
        echo \"Blue environment cleanup completed (container-based)\"
      "'

# 7-b) Rollback to BLUE — 원본 구조 유지, 스크립트 호출 방식으로 수정
rollback-to-blue-dev:
  stage: cleanup-dev
  <<: *alpine_docker_setup
  <<: *rules_dev_main
  when: manual  # 원본의 수동 실행 정책 유지
  allow_failure: false
  environment:
    name: production-dev
    url: "http://$DEPLOY_SERVER_DEV"
  script:
    - ssh "ubuntu@$DEPLOY_SERVER_DEV" 'bash -lc "
        cd ~/bgTest/v5ToWindow && 
        echo \"Rolling back to Blue environment...\" &&
        sudo docker exec blue-green-nginx ./switch-deployment.sh blue &&
        echo \"✅ Rollback to Blue completed\"
      "'"