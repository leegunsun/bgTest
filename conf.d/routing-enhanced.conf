# Enhanced Routing Configuration for Complete Load Balancing
# Supports gradual migration, canary deployment, and automatic failover

# Load balancing mode configuration
# Values: direct, canary, failover
map $http_x_lb_mode $lb_mode {
    default   "direct";
    canary    "canary";
    failover  "failover";
}

# Current active environment (set by API)
# Values: blue, green
map $active $primary_backend {
    default   blue;
    blue      blue;
    green     green;
}

# Gradual migration support - traffic percentage split
# This will be dynamically updated during migration
map $active $migration_backend {
    default   blue;
    blue      canary_blue_green;  # During migration, use mixed upstream
    green     canary_blue_green;  # During migration, use mixed upstream
}

# Migration status tracking
# Values: stable, migrating, rolling_back
map $http_x_migration_status $migration_status {
    default     "stable";
    migrating   "migrating";
    rolling_back "rolling_back";
}

# Final backend selection based on load balancing mode
map $lb_mode $backend {
    default   $primary_backend;
    direct    $primary_backend;
    canary    $migration_backend;
    failover  fallback;
}

# Health validation backend selection
map $active $health_backend {
    default   blue;
    blue      blue;
    green     green;
}

# Inactive environment detection for pre-switch validation
map $active $inactive_backend {
    default   green;
    blue      green;
    green     blue;
}

# Advanced canary deployment support with percentage control
# This enables A/B testing and gradual rollout
split_clients "$remote_addr$request_id" $canary_bucket {
    0%     "canary";     # Canary traffic percentage - dynamically controlled
    *      "stable";     # Stable traffic
}

# Canary backend routing based on bucket assignment
map $canary_bucket $canary_target {
    canary  $inactive_backend;  # Canary traffic goes to inactive environment
    stable  $primary_backend;   # Stable traffic goes to active environment
}

# Emergency rollback support
map $http_x_emergency_rollback $emergency_backend {
    default   $backend;
    "true"    fallback;
}

# Final backend with emergency override
map $emergency_backend $final_backend {
    default   $backend;
}

# Request routing based on path for direct environment access
map $uri $direct_backend {
    ~^/blue/     blue;
    ~^/green/    green;
    default      $final_backend;
}