# Enhanced NGINX Configuration for ALB Integration
# Optimized for 4 Application Instances per EC2

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Worker connection optimization
events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    # Basic configuration
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream_addr=$upstream_addr '
                    'upstream_response_time=$upstream_response_time '
                    'request_time=$request_time';
                    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;
    
    # Client configuration
    client_max_body_size 50m;
    client_body_buffer_size 128k;
    client_header_buffer_size 16k;
    large_client_header_buffers 4 16k;
    
    # Proxy configuration
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    proxy_temp_file_write_size 256k;
    proxy_connect_timeout 10s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Real IP configuration for ALB
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    
    # DNS resolver configuration
    resolver 169.254.169.253 valid=10s;
    resolver_timeout 5s;
    
    # Include upstream definitions
    include /etc/nginx/conf.d/upstreams-alb.conf;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=app:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=20r/s;
    
    # Main application server
    server {
        listen 80 default_server;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Basic health check endpoint (NGINX level)
        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Deep health check endpoint (ALB integration)
        # Routes to health_backend upstream for distributed health checking
        location = /health/deep {
            access_log off;
            limit_req zone=health burst=10 nodelay;
            
            proxy_pass http://health_backend/health/deep;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check specific timeouts
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            
            # Don't cache health checks
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
        
        # Instance-specific health checks (for debugging)
        location ~ ^/health/instance/([1-4])$ {
            access_log off;
            internal;
            
            set $instance_num $1;
            proxy_pass http://instance_$instance_num/health/deep;
            proxy_set_header Host $host;
            proxy_connect_timeout 2s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
        }
        
        # Application traffic
        # Main traffic routing to app_backend upstream
        location / {
            # Rate limiting for application traffic
            limit_req zone=app burst=200 nodelay;
            
            # Proxy to application backend
            proxy_pass http://app_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Add custom headers for application
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header X-Request-Start $msec;
            
            # Proxy buffering
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            
            # Retry configuration
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 5s;
        }
        
        # API endpoints with enhanced monitoring
        location /api/ {
            limit_req zone=app burst=50 nodelay;
            
            proxy_pass http://app_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API specific timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Enhanced retry for APIs
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
        }
        
        # Static files optimization
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            
            # Static files caching
            expires 1h;
            add_header Cache-Control "public, immutable";
            
            # Simplified retry for static files
            proxy_next_upstream error timeout http_404;
            proxy_next_upstream_tries 2;
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
        
        # Deny access to hidden files
        location ~ /\. {
            deny all;
        }
    }
    
    # Health monitoring server (internal)
    server {
        listen 81;
        server_name localhost;
        access_log off;
        
        # NGINX status endpoint
        location = /nginx_status {
            stub_status on;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
        }
        
        # Instance health summary
        location = /instances/health {
            content_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"
                
                local instances = {}
                for i = 1, 4 do
                    local httpc = http.new()
                    local res, err = httpc:request_uri("http://127.0.0.1:300" .. i .. "/health/deep", {
                        method = "GET",
                        timeout = 2000
                    })
                    
                    instances[i] = {
                        port = 3000 + i,
                        status = res and res.status or "error",
                        healthy = res and res.status == 200 or false
                    }
                end
                
                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode({
                    nginx_uptime = ngx.now() - ngx.shared.nginx_start_time,
                    instances = instances,
                    timestamp = ngx.now()
                }))
            }
        }
    }
    
    # Development/Debug server (can be disabled in production)
    server {
        listen 8080;
        server_name localhost;
        
        # Instance-specific access for debugging
        location ~ ^/instance/([1-4])(/.*)?$ {
            set $instance_num $1;
            set $instance_path $2;
            
            if ($instance_path = "") {
                set $instance_path "/";
            }
            
            proxy_pass http://instance_$instance_num$instance_path;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Debug-Instance $instance_num;
            
            add_header X-Served-By "Instance-$instance_num" always;
        }
        
        # Fallback endpoint testing
        location /fallback {
            proxy_pass http://fallback_backend/;
            proxy_set_header Host $host;
            add_header X-Upstream "fallback" always;
        }
    }
}

# Stream configuration for potential future use (TCP/UDP load balancing)
# stream {
#     upstream backend_stream {
#         server 127.0.0.1:8080;
#         server 127.0.0.1:8081;
#     }
#     
#     server {
#         listen 9000;
#         proxy_pass backend_stream;
#     }
# }